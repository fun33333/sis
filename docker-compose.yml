# services:
#   db:
#     image: postgres:15
#     container_name: project_postgres
#     restart: always
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#     ports:
#       - "${POSTGRES_PORT}:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   pgadmin:
#     image: dpage/pgadmin4
#     container_name: project_pgadmin
#     restart: always
#     environment:
#       PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
#       PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
#     ports:
#       - "${PGADMIN_PORT}:80"
#     depends_on:
#       - db

#   backend:
#     build: ./backend
#     container_name: idara_backend
#     command: python manage.py runserver 0.0.0.0:${BACKEND_PORT}
#     volumes:
#       - ./backend:/app
#       - ./backend/credentials.json:/app/credentials.json
#     ports:
#       - "${BACKEND_PORT}:${BACKEND_PORT}"
#     env_file:
#       - ./backend/.env
#       - ./.env
#     depends_on:
#       db:
#         condition: service_healthy
#     restart: unless-stopped

#   frontend:
#     build: ./frontend
#     container_name: idara_frontend
#     ports:
#       - "${FRONTEND_PORT}:${FRONTEND_PORT}"
#     volumes:
#       - ./frontend:/app
#       - /app/node_modules
#       - /app/.next
#     env_file:
#       - ./frontend/.env
#       - ./.env
#     depends_on:
#       - backend
#     restart: unless-stopped

# volumes:
#   postgres_data:
  
# #   db:
# #     image: postgres:15
# #     container_name: project_postgres
# #     restart: always
# #     environment:
# #       POSTGRES_USER: ${POSTGRES_USER}
# #       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
# #       POSTGRES_DB: ${POSTGRES_DB}
# #     ports:
# #       - "${POSTGRES_PORT}:5432"
# #     volumes:
# #       - postgres_data:/var/lib/postgresql/data

# #   pgadmin:
# #     image: dpage/pgadmin4
# #     container_name: project_pgadmin
# #     restart: always
# #     environment:
# #       PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
# #       PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
# #     ports:
# #       - "${PGADMIN_PORT}:80"
# #     depends_on:
# #       - db

# # volumes:
# #   postgres_data:
  
#   # Keep Next.js build cache and node_modules inside container to avoid Windows bind mount issues
#   # (named volumes defined implicitly by absolute container paths above)



services:
  db:
    image: postgres:15
    container_name: project_postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: project_pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data: